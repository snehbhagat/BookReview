openapi: 3.0.3
info:
  title: Book Review API
  version: 0.1.0
servers:
  - url: http://localhost:4000
paths:
  /api/auth/register:
    post:
      summary: Register user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: Email already registered
  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/books:
    get:
      summary: List books
      parameters:
        - in: query
          name: search
          schema: { type: string }
        - in: query
          name: genre
          schema: { type: string }
        - in: query
          name: author
          schema: { type: string }
        - in: query
          name: sort
          schema:
            type: string
            enum: [newest, rating, title]
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 50, default: 12 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBooks'
    post:
      summary: Create book
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /api/books/{id}:
    get:
      summary: Get book by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: Not found
  /api/books/{id}/reviews:
    get:
      summary: List reviews for a book
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: page
          schema: { type: integer, default: 1, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer, default: 10, minimum: 1, maximum: 50 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviews'
    post:
      summary: Create review for a book (one per user)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '409':
          description: Already reviewed
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        email: { type: string, format: email }
        avatarUrl: { type: string }
    RegisterInput:
      type: object
      required: [name, email, password]
      properties:
        name: { type: string }
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
    LoginInput:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    Book:
      type: object
      properties:
        _id: { type: string }
        title: { type: string }
        description: { type: string }
        isbn13: { type: string }
        coverUrl: { type: string }
        publishedYear: { type: integer }
        authors:
          type: array
          items: { type: string }
        genres:
          type: array
          items: { type: string }
        avgRating: { type: number }
        ratingsCount: { type: integer }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    BookInput:
      type: object
      required: [title]
      properties:
        title: { type: string }
        description: { type: string }
        isbn13: { type: string }
        coverUrl: { type: string }
        publishedYear: { type: integer }
        authors:
          type: array
          items: { type: string }
        genres:
          type: array
          items: { type: string }
    Review:
      type: object
      properties:
        _id: { type: string }
        user:
          type: object
        book: { type: string }
        rating: { type: integer, minimum: 1, maximum: 5 }
        body: { type: string }
        createdAt: { type: string, format: date-time }
    ReviewInput:
      type: object
      required: [rating]
      properties:
        rating: { type: integer, minimum: 1, maximum: 5 }
        body: { type: string }
    PaginatedBooks:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }
    PaginatedReviews:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Review'
        page: { type: integer }
        limit: { type: integer }
        total: { type: integer }
        totalPages: { type: integer }